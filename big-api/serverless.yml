# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bighuman
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: us-east-2 # Overwrite the default region used. Default is us-east-1
  profile: ${self:custom.profiles.${self:provider.environment.PROFILE}}
  environment:
    STAGE: ${opt:stage, self:custom.defaultStage}
    PROFILE: ${opt:profile, self:custom.defaultProfile}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"

custom:
  dynamodbProvisions:
    dev: 1
    prod: 5
  streamAccounts:
    dev: 418346753775
    prod: 111111111111
  individually:
    dev: false
    prod: true
  defaultStage: v1
  defaultProfile: dev
  deletionPolicy:
    dev: Delete
    prod: Retain
  profiles:
    dev: dev
    prod: prod
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

functions:
  jobsExchange:
    description: "Jobs Players"
    handler: api/jobs/players/handler.default
    events:
      - schedule: rate(1 minute)
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    # Stack #1
    PlayersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.deletionPolicy.${self:provider.environment.PROFILE}}
      Properties:
        AttributeDefinitions:
          -
            AttributeName: first_name
            AttributeType: S
          -
            AttributeName: last_name
            AttributeType: S
          -
            AttributeName: position
            AttributeType: S
          -
            AttributeName: active
            AttributeType: B
        KeySchema:
          -
            AttributeName: first_name
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          -
            IndexName: last_name-index
            KeySchema:
              -
                AttributeName: last_name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          -
            IndexName: active-index
            KeySchema:
              -
                AttributeName: active
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          -
            IndexName: position-index
            KeySchema:
              - AttributeName: position
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: Players-${self:provider.environment.PROFILE}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
